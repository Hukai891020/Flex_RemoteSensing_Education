<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (c) 2010-2011 ESRI
     All rights reserved under the copyright laws of the United States
     and applicable international laws, treaties, and conventions.
     You may freely redistribute and use this sample code, with or
     without modification, provided you include the original copyright
     notice and use restrictions.
     See use restrictions in use_restrictions.txt.
-->
<!---
    The default skin class for an InfoSymbolWindow instance.
    Added in version 2.3 of the ArcGIS API for Flex.
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        clipAndEnableScrolling="false"
        minHeight="8"
        minWidth="8">
    <fx:Metadata>
        /**
         * A strongly typed property that references the component to which this skin is applied.
         */
        [HostComponent("com.esri.ags.components.supportClasses.InfoSymbolWindow")]
    </fx:Metadata>
    <fx:Script>
        <![CDATA[
            import com.esri.ags.components.supportClasses.InfoPlacement;

            /**
             * @private
             */
            override protected function measure():void
            {
                const infoPlacement:String = getStyle('infoPlacement');
                measureWidthHeight(infoPlacement);
            }

            private function measureWidthHeight(infoPlacement:String):void
            {
                var dx:Number = 0;
                var dy:Number = 0;
                var borderThickness:Number = getStyle('borderThickness');
                if (borderThickness > 0)
                {
                    const borderSize:int = borderThickness + borderThickness;
                    dx += borderSize;
                    dy += borderSize;
                }
                const paddingLeft:Number = getStyle('paddingLeft');
                dx += paddingLeft;
                const paddingRight:Number = getStyle('paddingRight');
                dx += paddingRight;
                const paddingTop:Number = getStyle('paddingTop');
                dy += paddingTop;
                const paddingBottom:Number = getStyle('paddingBottom');
                dy += paddingBottom;
                const offsetX:Number = getStyle('infoOffsetX');
                const offsetY:Number = getStyle('infoOffsetY');
                switch (infoPlacement)
                {
                    case InfoPlacement.CENTER:
                        // No Op !
                        break;
                    case InfoPlacement.TOP:
                    case InfoPlacement.BOTTOM:
                    {
                        dy += offsetY;
                        break;
                    }
                    case InfoPlacement.LEFT:
                    case InfoPlacement.RIGHT:
                    {
                        dx += offsetX;
                        break;
                    }
                    default:
                    {
                        dx += offsetX;
                        dy += offsetY;
                    }
                }
                measuredWidth = contentGroup.measuredWidth + dx;
                measuredHeight = contentGroup.measuredHeight + dy;
                measuredMinWidth = contentGroup.measuredMinWidth + dx;
                measuredMinHeight = contentGroup.measuredMinHeight + dy;
                path.measuredWidth = measuredWidth;
                path.measuredHeight = measuredHeight;
                hostComponent.width = measuredWidth;
                hostComponent.height = measuredHeight;
            }

            private function updateParts(unscaledWidth:Number, unscaledHeight:Number, infoPlacement:String):void
            {
                var data:String = "M 0 0";
                const unscaledWidth2:Number = unscaledWidth * 0.5;
                const unscaledHeight2:Number = unscaledHeight * 0.5;
                const maxRadius:Number = Math.min(unscaledWidth2, unscaledHeight2) * 0.5;
                const borderThickness:Number = getStyle('borderThickness');
                const offsetX:Number = getStyle('infoOffsetX');
                const offsetY:Number = getStyle('infoOffsetY');
                const offsetW:Number = getStyle('infoOffsetW');
                const paddingLeft:Number = getStyle('paddingLeft');
                const paddingTop:Number = getStyle('paddingTop');
                const upperLeftRadius:Number = Math.min(maxRadius, getStyle('upperLeftRadius'));
                const upperRightRadius:Number = Math.min(maxRadius, getStyle('upperRightRadius'));
                const lowerLeftRadius:Number = Math.min(maxRadius, getStyle('lowerLeftRadius'));
                const lowerRightRadius:Number = Math.min(maxRadius, getStyle('lowerRightRadius'));
                switch (infoPlacement)
                {
                    case InfoPlacement.UPPERLEFT:
                    case InfoPlacement.UPPER_LEFT:
                    {
                        data += "L " + (-offsetX - offsetW) + " " + (-offsetY);
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (-unscaledWidth + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + (-unscaledWidth);
                        }
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (-unscaledHeight + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + (-unscaledHeight);
                        }
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (-offsetX - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + (-offsetX);
                        }
                        data += "V " + (-offsetY - offsetW);
                        contentGroup.move(borderThickness - unscaledWidth + paddingLeft, borderThickness - unscaledHeight + paddingTop);
                        break;
                    }
                    case InfoPlacement.TOP:
                    {
                        data += "L " + (-offsetW) + " " + (-offsetY);
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (-unscaledWidth2 + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + (-unscaledWidth2);
                        }
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (-unscaledHeight + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + (-unscaledHeight);
                        }
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (unscaledWidth2 - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + (unscaledWidth2);
                        }
                        if (lowerRightRadius > 0)
                        {
                            data += "V " + (-offsetY - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        else
                        {
                            data += "V " + (-offsetY);
                        }
                        data += "H " + offsetW;
                        contentGroup.move(borderThickness - unscaledWidth2 + paddingLeft, borderThickness - unscaledHeight + paddingTop);
                        break;
                    }
                    case InfoPlacement.LEFT:
                    {
                        data += "L " + (-offsetX) + " " + offsetW;
                        if (lowerRightRadius > 0)
                        {
                            data += "V " + (unscaledHeight2 - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        else
                        {
                            data += "V " + unscaledHeight2;
                        }
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (-unscaledWidth + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + (-unscaledWidth);
                        }
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (-unscaledHeight2 + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + (-unscaledHeight2);
                        }
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (-offsetX - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + (-offsetX);
                        }
                        data += "V " + (-offsetW);
                        contentGroup.move(borderThickness - unscaledWidth + paddingLeft, borderThickness - unscaledHeight2 + paddingTop);
                        break;
                    }
                    case InfoPlacement.CENTER:
                    {
                        if (lowerRightRadius > 0)
                        {
                            data = "M " + (unscaledWidth2 - lowerRightRadius) + " " + unscaledHeight2;
                        }
                        else
                        {
                            data = "M " + unscaledWidth2 + " " + unscaledHeight2;
                        }
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (-unscaledWidth2 + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + (-unscaledWidth2);
                        }
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (-unscaledHeight2 + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + (-unscaledHeight2);
                        }
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (unscaledWidth2 - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + unscaledWidth2;
                        }
                        if (lowerRightRadius)
                        {
                            data += "V " + (unscaledHeight2 - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        contentGroup.move(borderThickness - unscaledWidth2 + paddingLeft, borderThickness - unscaledHeight2 + paddingTop);
                        break;
                    }
                    case InfoPlacement.RIGHT:
                    {
                        data += "L " + offsetX + " " + (-offsetW);
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (-unscaledHeight2 + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + (-unscaledHeight2);
                        }
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (unscaledWidth - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + unscaledWidth;
                        }
                        if (lowerRightRadius > 0)
                        {
                            data += "V " + (unscaledHeight2 - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        else
                        {
                            data += "V " + unscaledHeight2;
                        }
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (offsetX + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + offsetX;
                        }
                        data += "V " + offsetW;
                        contentGroup.move(borderThickness + offsetX + paddingLeft, borderThickness - unscaledHeight2 + paddingTop);
                        break;
                    }
                    case InfoPlacement.LOWERLEFT:
                    case InfoPlacement.LOWER_LEFT:
                    {
                        data += "L " + (-offsetX) + " " + (offsetY + offsetW);
                        if (lowerRightRadius > 0)
                        {
                            data += "V " + (unscaledHeight - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        else
                        {
                            data += "V " + unscaledHeight;
                        }
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (-unscaledWidth + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + (-unscaledWidth);
                        }
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (offsetY + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + offsetY;
                        }
                        data += "H " + (-offsetX - offsetW);
                        contentGroup.move(borderThickness - unscaledWidth + paddingLeft, borderThickness + offsetY + paddingTop);
                        break;
                    }
                    case InfoPlacement.BOTTOM:
                    {
                        data += "L " + offsetW + " " + offsetY;
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (unscaledWidth2 - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + unscaledWidth2;
                        }
                        if (lowerRightRadius > 0)
                        {
                            data += "V " + (unscaledHeight - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        else
                        {
                            data += "V " + unscaledHeight;
                        }
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (-unscaledWidth2 + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + (-unscaledWidth2);
                        }
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (offsetY + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + offsetY;
                        }
                        data += "H " + (-offsetW);
                        contentGroup.move(borderThickness - unscaledWidth2 + paddingLeft, borderThickness + offsetY + paddingTop);
                        break;
                    }
                    case InfoPlacement.LOWERRIGHT:
                    case InfoPlacement.LOWER_RIGHT:
                    {
                        data += "L " + (offsetX + offsetW) + " " + offsetY;
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (unscaledWidth - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + unscaledWidth;
                        }
                        if (lowerRightRadius > 0)
                        {
                            data += "V " + (unscaledHeight - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        else
                        {
                            data += "V " + unscaledHeight;
                        }
                        if (lowerLeftRadius > 0)
                        {
                            data += "H " + (offsetX + lowerLeftRadius);
                            data += lowerLeftCurve(lowerLeftRadius);
                        }
                        else
                        {
                            data += "H " + offsetX;
                        }
                        data += "V " + (offsetY + offsetW);
                        contentGroup.move(borderThickness + offsetX + paddingLeft, borderThickness + offsetY + paddingTop);
                        break;
                    }
                    default: // InfoPlacement.UPPERRIGHT
                    {
                        data += "L " + offsetX + " " + (-offsetY - offsetW);
                        if (upperLeftRadius > 0)
                        {
                            data += "V " + (-unscaledHeight + upperLeftRadius);
                            data += upperLeftCurve(upperLeftRadius);
                        }
                        else
                        {
                            data += "V " + (-unscaledHeight);
                        }
                        if (upperRightRadius > 0)
                        {
                            data += "H " + (unscaledWidth - upperRightRadius);
                            data += upperRightCurve(upperRightRadius);
                        }
                        else
                        {
                            data += "H " + unscaledWidth;
                        }
                        if (lowerRightRadius > 0)
                        {
                            data += "V " + (-offsetY - lowerRightRadius);
                            data += lowerRightCurve(lowerRightRadius);
                        }
                        else
                        {
                            data += "V " + (-offsetY);
                        }
                        data += "H " + (offsetX + offsetW);
                        contentGroup.move(borderThickness + offsetX + paddingLeft, borderThickness - unscaledHeight + paddingTop);
                    }
                }
                path.data = data + "Z";
            }

            private function upperLeftCurve(radius:Number):String
            {
                return "q 0 " + (-radius) + " " + radius + " " + (-radius);
            }

            private function upperRightCurve(radius:Number):String
            {
                return "q " + radius + " 0 " + radius + " " + radius;
            }

            private function lowerLeftCurve(radius:Number):String
            {
                return "q " + (-radius) + " 0 " + (-radius) + " " + (-radius);
            }

            private function lowerRightCurve(radius:Number):String
            {
                return "q 0 " + radius + " " + (-radius) + " " + radius;
            }

            private function updateInfoPlacement(unscaledWidth:Number, unscaledHeight:Number, infoPlacement:String):String
            {
                var condA:Boolean, condB:Boolean;
                var condX:Number, condY:Number;
                const infoPlacementMode:String = getStyle('infoPlacementMode');
                if (infoPlacementMode === 'none' || hostComponent.map.wrapAround180)
                {
                    return infoPlacement;
                }
                switch (infoPlacement)
                {
                    case InfoPlacement.UPPERLEFT:
                    case InfoPlacement.UPPER_LEFT:
                    {
                        condX = hostComponent.positionX - unscaledWidth;
                        condY = hostComponent.positionY - unscaledHeight;
                        condA = condX < 0;
                        condB = condY < 0;
                        if (condA && condB)
                        {
                            return InfoPlacement.LOWERRIGHT;
                        }
                        if (condA)
                        {
                            return InfoPlacement.UPPERRIGHT;
                        }
                        if (condB)
                        {
                            return InfoPlacement.LOWERLEFT;
                        }
                        break;
                    }
                    case InfoPlacement.LOWERLEFT:
                    case InfoPlacement.LOWER_LEFT:
                    {
                        condX = hostComponent.positionX - unscaledWidth;
                        condY = hostComponent.positionY + unscaledHeight;
                        condA = condX < 0;
                        condB = condY > hostComponent.map.height;
                        if (condA && condB)
                        {
                            return InfoPlacement.UPPERRIGHT;
                        }
                        if (condA)
                        {
                            return InfoPlacement.LOWERRIGHT;
                        }
                        if (condB)
                        {
                            return InfoPlacement.UPPERLEFT;
                        }
                        break;
                    }
                    case InfoPlacement.LOWERRIGHT:
                    case InfoPlacement.LOWER_RIGHT:
                    {
                        condX = hostComponent.positionX + unscaledWidth;
                        condY = hostComponent.positionY + unscaledHeight;
                        condA = condX > hostComponent.map.width;
                        condB = condY > hostComponent.map.height;
                        if (condA && condB)
                        {
                            return InfoPlacement.UPPERLEFT;
                        }
                        if (condA)
                        {
                            return InfoPlacement.LOWERLEFT;
                        }
                        if (condB)
                        {
                            return InfoPlacement.UPPERRIGHT;
                        }
                        break;
                    }
                    case InfoPlacement.LEFT:
                    {
                        condX = hostComponent.positionX - unscaledWidth;
                        condY = hostComponent.positionY - unscaledHeight * 0.5;
                        condA = condX < 0;
                        condB = condY < 0;
                        if (condA && condB)
                        {
                            return InfoPlacement.LOWERRIGHT;
                        }
                        if (condA)
                        {
                            return InfoPlacement.RIGHT;
                        }
                        if (condB)
                        {
                            return InfoPlacement.LOWERLEFT;
                        }
                        break;
                    }
                    case InfoPlacement.RIGHT:
                    {
                        condX = hostComponent.positionX + unscaledWidth;
                        condY = hostComponent.positionY - unscaledHeight * 0.5;
                        condA = condX > hostComponent.map.width;
                        condB = condY < 0;
                        if (condA && condB)
                        {
                            return InfoPlacement.LOWERLEFT;
                        }
                        if (condA)
                        {
                            return InfoPlacement.LEFT;
                        }
                        if (condB)
                        {
                            return InfoPlacement.LOWERRIGHT;
                        }
                        break;
                    }
                    case InfoPlacement.TOP:
                    {
                        const lTop:Number = hostComponent.positionX - unscaledWidth * 0.5;
                        const rTop:Number = hostComponent.positionX + unscaledWidth * 0.5;
                        condY = hostComponent.positionY - unscaledHeight;
                        condB = condY < 0;
                        if (condB && lTop > 0 && rTop < hostComponent.map.width)
                        {
                            return InfoPlacement.BOTTOM;
                        }
                        if (condB && lTop < 0)
                        {
                            return InfoPlacement.LOWERRIGHT;
                        }
                        if (condB && rTop > hostComponent.map.width)
                        {
                            return InfoPlacement.LOWERLEFT;
                        }
                        if (lTop < 0)
                        {
                            return InfoPlacement.UPPERRIGHT;
                        }
                        if (rTop > hostComponent.map.width)
                        {
                            return InfoPlacement.UPPERLEFT;
                        }
                        break;
                    }
                    case InfoPlacement.BOTTOM:
                    {
                        const lBottom:Number = hostComponent.positionX - unscaledWidth * 0.5;
                        const rBottom:Number = hostComponent.positionX + unscaledWidth * 0.5;
                        condY = hostComponent.positionY + unscaledHeight;
                        condB = condY > hostComponent.map.height;
                        if (condB && lBottom > 0 && rBottom < hostComponent.map.width)
                        {
                            return InfoPlacement.TOP;
                        }
                        if (condB && lBottom < 0)
                        {
                            return InfoPlacement.UPPERRIGHT;
                        }
                        if (condB && rBottom > hostComponent.map.width)
                        {
                            return InfoPlacement.UPPERLEFT;
                        }
                        if (lBottom < 0)
                        {
                            return InfoPlacement.LOWERRIGHT;
                        }
                        if (rBottom > hostComponent.map.width)
                        {
                            return InfoPlacement.LOWERLEFT;
                        }
                        break;
                    }
                    default:
                    {
                        condX = hostComponent.positionX + unscaledWidth;
                        condY = hostComponent.positionY - unscaledHeight;
                        condA = condX > hostComponent.map.width;
                        condB = condY < 0;
                        if (condA && condB)
                        {
                            return InfoPlacement.LOWERLEFT;
                        }
                        if (condA)
                        {
                            return InfoPlacement.UPPERLEFT;
                        }
                        if (condB)
                        {
                            return InfoPlacement.LOWERRIGHT;
                        }
                    }
                }
                return infoPlacement;
            }

            /**
             * @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                if (unscaledWidth > 0 && unscaledHeight > 0)
                {
                    const infoPlacementOld:String = getStyle('infoPlacement');
                    const infoPlacementNew:String = updateInfoPlacement(unscaledWidth, unscaledHeight, infoPlacementOld);
                    if (infoPlacementNew !== infoPlacementOld)
                    {
                        measureWidthHeight(infoPlacementNew);
                    }
                    updateParts(measuredWidth, measuredHeight, infoPlacementNew);
                    pathFill.color = getStyle("backgroundColor");
                    pathFill.alpha = getStyle("backgroundAlpha");
                    path.fill = pathFill.alpha > 0 ? pathFill : null;
                    pathStroke.weight = getStyle("borderThickness");
                    pathStroke.color = getStyle("borderColor");
                    pathStroke.alpha = getStyle("borderAlpha");
                    path.stroke = pathStroke.weight > 0 ? pathStroke : null;
                    const shadowDistance:Number = getStyle('shadowDistance');
                    if (shadowDistance == 0 && filters.length > 0)
                    {
                        filters = [];
                    }
                    else
                    {
                        const shadowAlpha:Number = getStyle('shadowAlpha');
                        const shadowAngle:Number = getStyle('shadowAngle');
                        const shadowColor:Number = getStyle('shadowColor');
                        if (shadowDistance !== dropShadow.distance ||
                            shadowAlpha !== dropShadow.alpha ||
                            shadowAngle !== dropShadow.angle ||
                            shadowColor !== dropShadow.color)
                        {
                            dropShadow.distance = shadowDistance;
                            dropShadow.alpha = shadowAlpha;
                            dropShadow.angle = shadowAngle;
                            dropShadow.color = shadowColor;
                            filters = [ dropShadow ];
                        }
                    }
                }
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <s:DropShadowFilter id="dropShadow"/>
        <s:SolidColorStroke id="pathStroke" pixelHinting="true"/>
        <s:SolidColor id="pathFill"/>
    </fx:Declarations>
    <!--- @private -->
    <s:Path id="path"
            minHeight="0"
            minWidth="0"/>
    <!--- Skin part for the info window content. -->
    <s:Group id="contentGroup"
             minHeight="0"
             minWidth="0"/>
</s:Skin>
