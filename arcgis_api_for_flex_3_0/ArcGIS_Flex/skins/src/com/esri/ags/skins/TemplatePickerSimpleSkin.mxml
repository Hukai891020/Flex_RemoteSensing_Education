<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (c) 2010-2011 ESRI

     All rights reserved under the copyright laws of the United States
     and applicable international laws, treaties, and conventions.

     You may freely redistribute and use this sample code, with or
     without modification, provided you include the original copyright
     notice and use restrictions.

     See use restrictions in use_restrictions.txt.
-->
<!---
     Alternative skin class for the TemplatePicker component which does not group feature templates by feature layers.
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        initialize="this_initializeHandler(event)">

    <!-- host component -->
    <fx:Metadata>
        /**
        * A strongly typed property that references the component to which this skin is applied.
        */
        [HostComponent("com.esri.ags.components.TemplatePicker")]
    </fx:Metadata>

    <s:states>
        <s:State name="normal"/>
        <s:State name="loading"/>
        <s:State name="disabled"/>
    </s:states>

    <fx:Script>
        <![CDATA[
            import com.esri.ags.components.supportClasses.Template;
            import com.esri.ags.events.LayerEvent;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.skins.supportClasses.TemplatePickerListItemRenderer;

            import mx.binding.utils.ChangeWatcher;
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;

            import spark.components.List;
            import spark.events.IndexChangeEvent;
            import spark.layouts.TileLayout;

            private var _changeWatcher:ChangeWatcher;
            private var _templateCollectionChanged:Boolean;
            private var _selectedTemplateChanged:Boolean;
            private var _skinSelectedTemplate:Template;

            private var _selectedTemplateChangeWatcher:ChangeWatcher;
            private var _templatePickerListItemRenderer:ClassFactory = new ClassFactory(TemplatePickerListItemRenderer);
            private var _itemRenderer:TemplatePickerListItemRenderer = new TemplatePickerListItemRenderer;

            [Bindable]
            [Embed(source="../../../../assets/skins/loader.swf")]
            private var loader:Class;

            /**
             * List to display feature templates.
             */
            public var templateList:List;

            private function this_initializeHandler(event:FlexEvent):void
            {
                _changeWatcher = ChangeWatcher.watch(hostComponent, "templateCollection", templateCollectionChangeHandler);
                _selectedTemplateChangeWatcher = ChangeWatcher.watch(hostComponent, "selectedTemplate", selectTemplateChangeWatcher);
            }

            private function templateCollectionChangeHandler(event:Event = null):void
            {
                invalidateProperties();
                _templateCollectionChanged = true;
            }

            private function selectTemplateChangeWatcher(event:Event = null):void
            {
                invalidateProperties();
                _selectedTemplateChanged = true;
            }

            /**
             * @private
             */
            override protected function commitProperties():void
            {
                super.commitProperties();

                if (_templateCollectionChanged)
                {
                    _templateCollectionChanged = false;

                    //First remove everything from the group
                    vGrp.removeAllElements();

                    var arrSelectedTemplates:Array = [];
                    for (var i:Number = 0; i < hostComponent.templateCollection.length; i++)
                    {
                        var featureLayer:FeatureLayer = hostComponent.templateCollection[i].featureLayer;

                        featureLayer.removeEventListener(FlexEvent.HIDE, featureLayer_hideShowHandler);
                        featureLayer.removeEventListener(FlexEvent.SHOW, featureLayer_hideShowHandler);
                        featureLayer.removeEventListener(LayerEvent.IS_IN_SCALE_RANGE_CHANGE, featureLayer_hideShowHandler);

                        featureLayer.addEventListener(FlexEvent.HIDE, featureLayer_hideShowHandler);
                        featureLayer.addEventListener(FlexEvent.SHOW, featureLayer_hideShowHandler);
                        featureLayer.addEventListener(LayerEvent.IS_IN_SCALE_RANGE_CHANGE, featureLayer_hideShowHandler);

                        for each (var template:Template in hostComponent.templateCollection[i].selectedTemplates)
                        {
                            arrSelectedTemplates.push(template);
                        }
                    }
                    templateList = new List;
                    templateList.addEventListener(IndexChangeEvent.CHANGE, templateList_changeHandler, false, -1, true);
                    templateList.dataProvider = new ArrayCollection(arrSelectedTemplates);
                    templateList.itemRenderer = _templatePickerListItemRenderer;

                    // style and layout
                    templateList.setStyle("borderVisible", false);
                    const tileLayout:TileLayout = new TileLayout();
                    tileLayout.verticalGap = 0;
                    tileLayout.horizontalGap = 0;
                    templateList.layout = tileLayout;

                    vGrp.addElement(templateList);
                    invalidateDisplayList();
                    selectTemplatFromList();
                }

                if (_selectedTemplateChanged)
                {
                    _selectedTemplateChanged = false;
                    selectTemplatFromList()
                }
            }

            /**
             * @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                super.updateDisplayList(unscaledWidth, unscaledHeight);

                if (vGrp && vGrp.numElements > 0)
                {
                    templateList = List(vGrp.getElementAt(0));
                    templateList.percentWidth = 100;
                    const numTemplates:int = templateList.dataProvider.length;
                    const templatesPerRow:int = Math.floor(hostComponent.width / _itemRenderer.width);

                    if (numTemplates <= templatesPerRow)
                    {
                        templateList.height = _itemRenderer.height;
                    }
                    else
                    {
                        templateList.height = Math.ceil(numTemplates / templatesPerRow) * (_itemRenderer.height);
                    }
                    vGrp.invalidateSize();
                }
            }

            private function selectTemplatFromList():void
            {
                if (!hostComponent.templateCollection)
                {
                    // Do nothing - as there is no collection.
                }
                else if (hostComponent.selectedTemplate == _skinSelectedTemplate)
                {
                    // Do nothing - as the template is already selected and is same as hostComponent.selectedTemplate.
                }
                else if (!hostComponent.selectedTemplate)
                {
                    // clear selection is called
                    _skinSelectedTemplate = null;
                    templateList.selectedIndex = -1
                }
                else
                {
                    for (var n:Number = 0; n < templateList.dataProvider.length; n++)
                    {
                        if (templateList.dataProvider.getItemAt(n).featureLayer === hostComponent.selectedTemplate.featureLayer &&
                            templateList.dataProvider.getItemAt(n).featureType === hostComponent.selectedTemplate.featureType &&
                            templateList.dataProvider.getItemAt(n).featureTemplate === hostComponent.selectedTemplate.featureTemplate)
                        {
                            templateList.selectedIndex = n;
                            _skinSelectedTemplate = hostComponent.selectedTemplate;
                        }
                    }
                }
            }

            private function featureLayer_hideShowHandler(event:Event):void
            {
                for (var i:Number = 0; i < templateList.dataProvider.length; i++)
                {
                    if (templateList.dataProvider.getItemAt(i).featureLayer === event.target)
                    {
                        templateList.dataProvider.getItemAt(i).dispatchEvent(new Event(Event.CHANGE));
                    }
                }
            }

            private function templateList_changeHandler(event:IndexChangeEvent):void
            {
                if (!templateList.selectedItem.featureLayer.visible || !templateList.selectedItem.featureLayer.isInScaleRange)
                {
                    event.preventDefault();
                }
                else
                {
                    templateList.removeEventListener(MouseEvent.MOUSE_DOWN, templateList_mouseDownHandler);
                    callLater(addListener);

                    if (event.newIndex != -1)
                    {
                        _skinSelectedTemplate = templateList.selectedItem;
                        hostComponent.selectedTemplate = _skinSelectedTemplate;
                    }
                    else
                    {
                        // no template selected
                        if (hostComponent.selectedTemplate)
                        {
                            _skinSelectedTemplate = null;
                            hostComponent.selectedTemplate = null;
                        }
                    }
                }
            }

            private function addListener():void
            {
                templateList.addEventListener(MouseEvent.MOUSE_DOWN, templateList_mouseDownHandler);
            }

            private function templateList_mouseDownHandler(event:MouseEvent):void
            {
                if (List(event.currentTarget).selectedItem == hostComponent.selectedTemplate) // shows a template already selected, so de-select it
                {
                    List(event.currentTarget).selectedIndex = -1;
                }
            }
        ]]>
    </fx:Script>

    <s:Rect width="40" height="40"
            horizontalCenter="0"
            includeIn="loading"
            radiusX="5"
            radiusY="5"
            verticalCenter="0">
        <s:fill>
            <s:SolidColor color="gray"/>
        </s:fill>
    </s:Rect>
    <mx:SWFLoader width="30" height="30"
                  autoLoad="true"
                  horizontalCenter="0"
                  includeIn="loading"
                  scaleContent="true"
                  source="{loader}"
                  verticalCenter="0"/>
    <s:Scroller width="100%" height="100%"
                enabled.disabled="true"
                enabled.normal="true"
                excludeFrom="loading"
                focusEnabled="false"
                hasFocusableChildren="true"
                horizontalScrollPolicy="auto"
                verticalScrollPolicy="auto">
        <!--- @private -->
        <s:VGroup id="vGrp"
                  width="100%" height="100%"/>
    </s:Scroller>
</s:Skin>
