<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (c) 2011 ESRI

     All rights reserved under the copyright laws of the United States
     and applicable international laws, treaties, and conventions.

     You may freely redistribute and use this sample code, with or
     without modification, provided you include the original copyright
     notice and use restrictions.

     See use restrictions in use_restrictions.txt.
-->
<!---
     The default skin class for the PopUpRenderer component.
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:mx="library://ns.adobe.com/flex/mx"
             xmlns:esri="http://www.esri.com/2008/ags"
             xmlns:supportClasses="com.esri.ags.skins.supportClasses.*"
             width="270"
             maxHeight="300"
             preinitialize="skin_preinitializeHandler(event)">

    <fx:Metadata>
        /** 
         * A strongly typed property that references the component to which this skin is applied.
         */
        [HostComponent("com.esri.ags.portal.PopUpRenderer")]
    </fx:Metadata>

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.Map;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.geometry.Multipoint;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.portal.supportClasses.PopUpFieldInfo;
            import com.esri.ags.portal.supportClasses.PopUpInfo;
            import com.esri.ags.skins.supportClasses.AttachmentMouseEvent;
            import com.esri.ags.utils.StringUtil;

            import flashx.textLayout.conversion.TextConverter;
            import flashx.textLayout.elements.Configuration;
            import flashx.textLayout.elements.LinkElement;
            import flashx.textLayout.elements.TextFlow;
            import flashx.textLayout.events.FlowElementMouseEvent;
            import flashx.textLayout.formats.TextDecoration;
            import flashx.textLayout.formats.TextLayoutFormat;

            import mx.containers.utilityClasses.ConstraintRow;
            import mx.events.FlexEvent;

            private var textLayoutConfiguration:Configuration;

            /* Define the symbol fill items that should be colored by the "symbolColor" style.*/
            private static const symbols:Array = [ "titleLineSymbol" ];

            /**
             * @private
             */
            override public function get symbolItems():Array
            {
                return symbols;
            }

            private function skin_preinitializeHandler(event:FlexEvent):void
            {
                // set the link styles
                textLayoutConfiguration = new Configuration();
                var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
                textLayoutFormat.color = getStyle("linkActiveColor")
                textLayoutFormat.textDecoration = TextDecoration.UNDERLINE;
                textLayoutConfiguration.defaultLinkActiveFormat = textLayoutFormat;
                textLayoutFormat = new TextLayoutFormat();
                textLayoutFormat.color = getStyle("linkHoverColor")
                textLayoutFormat.textDecoration = TextDecoration.UNDERLINE;
                textLayoutConfiguration.defaultLinkHoverFormat = textLayoutFormat;
                textLayoutFormat = new TextLayoutFormat();
                textLayoutFormat.color = getStyle("linkNormalColor")
                textLayoutFormat.textDecoration = TextDecoration.UNDERLINE;
                textLayoutConfiguration.defaultLinkNormalFormat = textLayoutFormat;

                attachmentInspector.addEventListener(AttachmentMouseEvent.ATTACHMENT_CLICK, attachmentInspector_attachmentClickHandler);
            }

            private function attachmentInspector_attachmentClickHandler(event:AttachmentMouseEvent):void
            {
                navigateToURL(new URLRequest(event.attachmentInfo.url));
            }

            /**
             * @private
             */
            override protected function commitProperties():void
            {
                super.commitProperties();

                var featureLayer:FeatureLayer = hostComponent.featureLayer;
                var formattedAttributes:Object = hostComponent.formattedAttributes;
                var graphic:Graphic = hostComponent.graphic;
                var map:Map = hostComponent.map;
                var popUpInfo:PopUpInfo = hostComponent.popUpInfo;
                var validMediaInfos:Array = hostComponent.validPopUpMediaInfos;
                var geometry:Geometry = graphic ? graphic.geometry : null;
                var layerDetails:LayerDetails = featureLayer ? featureLayer.layerDetails : null;

                vGroup.removeAllElements();
                if (popUpInfo)
                {
                    if (popUpInfo.title)
                    {
                        titleLabel.text = StringUtil.substitute(popUpInfo.title, formattedAttributes);
                        if (titleLabel.text)
                        {
                            vGroup.addElement(titleLabel);
                            vGroup.addElement(titleLine);
                        }
                    }

                    var htmlText:String;
                    if (popUpInfo.description)
                    {
                        htmlText = StringUtil.substitute(popUpInfo.description, formattedAttributes);
                        if (htmlText)
                        {
                            setTextFlow(descriptionText, htmlText);
                            vGroup.addElement(descriptionText);
                        }
                    }
                    else if (popUpInfo.popUpFieldInfos)
                    {
                        // make sure there's enough constraint rows
                        var constraintRows:Vector.<ConstraintRow> = keyValueGroupLayout.constraintRows; // returns a clone
                        if (constraintRows.length < popUpInfo.popUpFieldInfos.length)
                        {
                            for (var i:int = constraintRows.length + 1; i <= popUpInfo.popUpFieldInfos.length; i++)
                            {
                                var constraintRow:ConstraintRow = new ConstraintRow();
                                constraintRow.initialized(this, null); // required
                                constraintRow.id = "row" + i;
                                constraintRows.push(constraintRow);
                            }
                            keyValueGroupLayout.constraintRows = constraintRows;
                        }

                        vGroup.addElement(keyValueGroup);
                        keyValueGroup.removeAllElements();
                        var rowID:int = 1;
                        for each (var fieldInfo:PopUpFieldInfo in popUpInfo.popUpFieldInfos)
                        {
                            if (fieldInfo.visible)
                            {
                                var fieldLabel:spark.components.Label = new spark.components.Label();
                                fieldLabel.text = fieldInfo.label || fieldInfo.fieldName;
                                fieldLabel.left = 0;
                                fieldLabel.right = "col1:0";
                                fieldLabel.top = "row" + rowID + ":" + (rowID == 1 ? 5 : 15);
                                keyValueGroup.addElement(fieldLabel);

                                var fieldValue:RichEditableText;
                                htmlText = formattedAttributes[fieldInfo.fieldName];
                                if (htmlText)
                                {
                                    fieldValue = new RichEditableText();
                                    // convert attribute field values that just contain URLs into links 
                                    var match:Array = htmlText.match(/^\s*((https?|ftp):\/\/\S+)\s*$/i);
                                    if (match && match.length > 0)
                                    {
                                        htmlText = '<a href="' + match[1] + '" target="_blank">' + match[1] + "</a>";
                                    }
                                    setTextFlow(fieldValue, htmlText);
                                    fieldValue.editable = false;
                                    fieldValue.left = "col2:5";
                                    fieldValue.right = 0;
                                    fieldValue.top = fieldLabel.top;
                                    keyValueGroup.addElement(fieldValue);
                                }
                                rowID++;
                            }
                        }
                        if (fieldLabel)
                        {
                            fieldLabel.bottom = "row" + --rowID + ":5"; // add a little bottom padding to last label
                        }
                    }

                    if (validMediaInfos && validMediaInfos.length > 0)
                    {
                        vGroup.addElement(mediaBrowser);
                        mediaBrowser.attributes = graphic.attributes;
                        mediaBrowser.formattedAttributes = formattedAttributes;
                        mediaBrowser.popUpFieldInfos = popUpInfo.popUpFieldInfos;
                        mediaBrowser.popUpMediaInfos = validMediaInfos;
                    }

                    if (popUpInfo.showAttachments && graphic && featureLayer && layerDetails && layerDetails.hasAttachments && layerDetails.objectIdField)
                    {
                        vGroup.addElement(attachmentInspector);
                        attachmentInspector.showAttachments(graphic, featureLayer);
                    }

                    if (map && geometry)
                    {
                        vGroup.addElement(zoomToButton);
                    }
                }
            }

            private function setTextFlow(textComp:RichEditableText, htmlText:String):void
            {
                if (textComp && htmlText != null)
                {
                    var textFlow:TextFlow = TextConverter.importToFlow(htmlText, TextConverter.TEXT_FIELD_HTML_FORMAT, textLayoutConfiguration);
                    if (textFlow)
                    {
                        textFlow.addEventListener(FlowElementMouseEvent.CLICK, textFlow_linkClickHandler, false, 0, true);
                        textComp.textFlow = textFlow;
                    }
                }
            }

            private function textFlow_linkClickHandler(event:FlowElementMouseEvent):void
            {
                var linkElement:LinkElement = event.flowElement as LinkElement;
                if (linkElement && linkElement.target != "_blank")
                {
                    linkElement.target = "_blank"; // make sure target is "_blank"
                }
            }

            private function zoomToButton_clickHandler(event:MouseEvent):void
            {
                var graphic:Graphic = hostComponent.graphic;
                var map:Map = hostComponent.map;
                var geometry:Geometry = graphic.geometry;

                var extent:Extent = geometry.extent; // returns null for MapPoint or Multipoint's with only one point
                if (extent)
                {
                    map.extent = extent;
                    // make sure the whole extent is visible
                    if (!map.extent.contains(extent))
                    {
                        map.level--;
                    }
                }
                else
                {
                    var mapPoint:MapPoint;
                    if (geometry is MapPoint)
                    {
                        mapPoint = geometry as MapPoint;
                    }
                    else if (geometry is Multipoint)
                    {
                        var multipoint:Multipoint = geometry as Multipoint;
                        if (multipoint.points && multipoint.points.length > 0)
                        {
                            mapPoint = multipoint.points[0];
                        }
                    }
                    if (mapPoint)
                    {
                        // Zoom to 1/16th the size of the current extent.
                        // This is the same as calling map.zoomIn() four times.
                        map.zoom(1 / 16, mapPoint);
                    }
                }
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <!--- @private -->
        <s:Label id="titleLabel"
                 width="100%"
                 fontWeight="bold"/>

        <!--- @private -->
        <s:Line id="titleLine" width="100%">
            <s:stroke>
                <s:SolidColorStroke id="titleLineSymbol"
                                    color="black"
                                    weight="1"/>
            </s:stroke>
        </s:Line>

        <!--- @private -->
        <s:RichEditableText id="descriptionText"
                            width="100%"
                            editable="false"/>

        <!--- @private -->
        <s:Group id="keyValueGroup" width="100%">
            <s:layout>
                <s:ConstraintLayout id="keyValueGroupLayout">
                    <s:constraintColumns>
                        <s:ConstraintColumn id="col1" maxWidth="180"/>
                        <s:ConstraintColumn id="col2" width="100%"/>
                    </s:constraintColumns>
                </s:ConstraintLayout>
            </s:layout>
        </s:Group>

        <!--- @private -->
        <supportClasses:PopUpMediaBrowser id="mediaBrowser"
                                          width="100%"
                                          skinClass="skins.PopUpMediaBrowserCustomSkin"/>

        <!--- @private -->
        <esri:AttachmentInspector id="attachmentInspector"
                                  width="100%"
                                  addEnabled="false"
                                  deleteEnabled="false"/>

        <!--- @private -->
        <s:Button id="zoomToButton"
                  height="40"
                  click="zoomToButton_clickHandler(event)"
                  fontWeight="bold"
                  label="Zoom"/>
    </fx:Declarations>

    <s:Scroller width="100%" height="100%">
        <!--- @private -->
        <s:VGroup id="vGroup"
                  paddingBottom="5"
                  paddingLeft="5"
                  paddingRight="5"
                  paddingTop="5">
            <!-- elements are added in commitProperties() -->
        </s:VGroup>
    </s:Scroller>

</s:SparkSkin>
