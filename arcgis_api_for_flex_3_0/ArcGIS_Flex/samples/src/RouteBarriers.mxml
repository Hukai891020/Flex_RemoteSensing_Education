<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:esri="http://www.esri.com/2008/ags"
               initialize="initApp()"
               pageTitle="Routing while avoiding bad spots">

    <!--
         This sample shows how to avoid certain locations (barriers)
         when routing between stops.

         The map has a mapClickHandler which is the main function.
         When users click on the map, a "stop" or "barrier" will be added
         as a graphic to the graphics layer called inputsLayer.

         If there are two or more stops, the solve operation on the RouteTask
         will be used to create route between all the stops (taking into account
         any barriers).

         Additional route features you might want to try:
         * optimize the order of stops using findBestSequence.
         * batch routing (group the stops by their names)
         * time windows
    -->

    <s:layout>
        <s:VerticalLayout paddingTop="15"/>
    </s:layout>

    <fx:Script>
        <![CDATA[
            import com.esri.ags.FeatureSet;
            import com.esri.ags.Graphic;
            import com.esri.ags.events.MapMouseEvent;
            import com.esri.ags.events.RouteEvent;
            import com.esri.ags.symbols.CompositeSymbol;
            import com.esri.ags.symbols.TextSymbol;
            import com.esri.ags.tasks.supportClasses.RouteResult;

            import mx.controls.Alert;
            import mx.rpc.events.FaultEvent;

            [Bindable]
            private var stops:FeatureSet = new FeatureSet([]);

            [Bindable]
            private var barriers:FeatureSet = new FeatureSet([]);

            [Bindable]
            private var selectedBtn:ToggleButton;

            [Bindable]
            private var lastRoute:Graphic;

            private function initApp():void
            {
                selectedBtn = addStopsBtn;
            }

            private function mapClickHandler(event:MapMouseEvent):void
            {
                if (selectedBtn == addStopsBtn)
                {
                    var stopSymbol:CompositeSymbol = new CompositeSymbol();
                    var circleSym:SimpleMarkerSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 20, 0x000099);
                    var textSym:TextSymbol = new TextSymbol(String(stops.features.length + 1));
                    textSym.textFormat = new TextFormat("Verdana", null, null, true);
                    textSym.color = 0xFFFFFF;
                    stopSymbol.symbols = [ circleSym, textSym ];
                    var stop:Graphic = new Graphic(event.mapPoint, stopSymbol);
                    inputsLayer.add(stop);
                    stops.features.push(stop);
                }
                else
                {
                    var barrier:Graphic = new Graphic(event.mapPoint, barrierSymbol);
                    inputsLayer.add(barrier);
                    barriers.features.push(barrier);
                }

                if (stops.features.length > 1)
                {
                    routeTask.solve(routeParams);
                }
            }

            private function solveCompleteHandler(event:RouteEvent):void
            {
                var routeResult:RouteResult = event.routeSolveResult.routeResults[0];
                lastRoute = routeResult.route;
                lastRoute.toolTip = routeResult.routeName;
                if (routeResult.route.attributes.Total_Time)
                {
                    lastRoute.toolTip += " in " + Math.round(Number(routeResult.route.attributes.Total_Time)) + " minutes.";
                }
            }

            private function faultHandler(event:FaultEvent):void
            {
                Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "Routing Error " + event.fault.faultCode);
                // remove last stop (or both stops if only two)
                if (stops.features.length <= 2)
                {
                    inputsLayer.clear();
                    stops = new FeatureSet([]);
                }
                else
                {
                    inputsLayer.remove(stops.features.pop());
                }
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:Extent id="initialExtent"
                     xmin="-117.22" ymin="34.04" xmax="-117.17" ymax="34.07">
            <esri:SpatialReference wkid="4326"/>
        </esri:Extent>

        <esri:RouteTask id="routeTask"
                        concurrency="last"
                        fault="faultHandler(event)"
                        requestTimeout="30"
                        showBusyCursor="true"
                        solveComplete="solveCompleteHandler(event)"
                        url="http://tasks.arcgisonline.com/ArcGIS/rest/services/NetworkAnalysis/ESRI_Route_NA/NAServer/Route"/>

        <esri:RouteParameters id="routeParams"
                              outSpatialReference="{myMap.spatialReference}"
                              pointBarriers="{barriers}"
                              stops="{stops}"/>

        <esri:SimpleMarkerSymbol id="barrierSymbol2"
                                 color="0xFF0000"
                                 size="15"
                                 style="x">
            <esri:SimpleLineSymbol width="4"/>
        </esri:SimpleMarkerSymbol>

        <esri:PictureMarkerSymbol id="barrierSymbol" source="assets/road-closed-32x32.png"/>

        <esri:SimpleLineSymbol id="routeSymbol"
                               width="5"
                               alpha="0.6"
                               color="0x000099"/>
    </fx:Declarations>

    <s:HGroup paddingLeft="15">
        <s:ToggleButton id="addStopsBtn"
                        click="selectedBtn = addStopsBtn"
                        label="Add Stops"
                        selected="{selectedBtn == addStopsBtn}"/>
        <s:ToggleButton id="addBarriersBtn"
                        click="selectedBtn = addBarriersBtn"
                        label="Add Barriers"
                        selected="{selectedBtn == addBarriersBtn}"/>
        <s:Button label="Clear">
            <s:click>
                <![CDATA[
                    stops = new FeatureSet([]);
                    barriers = new FeatureSet([]);
                    lastRoute = new Graphic();
                    inputsLayer.clear();
                ]]>
            </s:click>
        </s:Button>
    </s:HGroup>
    <esri:Map id="myMap" mapClick="mapClickHandler(event)">
        <esri:extent>
            <esri:WebMercatorExtent minlon="-117.22" minlat="34.04" maxlon="-117.17" maxlat="34.07"/>
        </esri:extent>
        <esri:ArcGISTiledMapServiceLayer url="http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"/>
        <esri:GraphicsLayer graphicProvider="{lastRoute}" symbol="{routeSymbol}"/>
        <esri:GraphicsLayer id="inputsLayer"/>
    </esri:Map>

</s:Application>
