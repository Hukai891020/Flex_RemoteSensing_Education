<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:esri="http://www.esri.com/2008/ags"
               pageTitle="Edit with AttributeInspector">
    <!--
         This application allows user to click on a feature (parcels)
         and view and modify a few attributes of that feature.

         This is done by having the map click using the clicked point to
         select feature(s) from the FeatureLayer.

         The AttributeInspector then displays the selection in the InfoWindow
         which is shown where user clicked the map.

         Note that this sample displays the FeatureLayer in "selection" mode and
         that the parcels are actually displayed using a dynamic layer pointing to
         the matching map service.
    -->
    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.events.AttributeInspectorEvent;
            import com.esri.ags.events.FeatureLayerEvent;
            import com.esri.ags.events.MapMouseEvent;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.layers.supportClasses.FeatureEditResult;
            import com.esri.ags.layers.supportClasses.FeatureEditResults;
            import com.esri.ags.layers.supportClasses.Field;

            import mx.controls.Alert;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;
            import mx.rpc.events.FaultEvent;

            private function map_mapClickHandler(event:MapMouseEvent):void
            {
                // set the selection query based on the click
                queryMapClick.geometry = event.mapPoint;
                myFeatureLayer.selectFeatures(queryMapClick); // default selectionMethod is FeatureLayer.SELECTION_NEW
                myMap.infoWindow.hide();
            }

            private function attrInsp_faultHandler(event:FaultEvent):void
            {
                Alert.show(event.fault.message, "Fault");
            }

            private function myFeatureLayer_selectionCompleteHandler(event:FeatureLayerEvent):void
            {
                // only show infoWindow if a feature was found
                if (event.featureLayer.numGraphics > 0)
                {
                    status.text = "Feature selected";
                    for each (var field:Field in event.featureLayer.layerDetails.fields)
                    {
                        if (field.type == Field.TYPE_DATE)
                        {
                            for each (var feature:Graphic in event.features)
                            {
                                var date:Date = new Date(feature.attributes[field.name]);
                                if (date.milliseconds == 999)
                                {
                                    date.milliseconds++; //Add 1ms to date values ending in 999 to workaround REST date bug
                                    feature.attributes[field.name] = date.time;
                                }
                            }
                        }
                    }
                    myMap.infoWindow.show(queryMapClick.geometry as MapPoint);
                }
                else
                {
                    if (!status.text == "Feature deleted.") //avoid showing the alert box, immediately after deleting
                    {
                        status.text = "";
                        Alert.show("Sorry found nothing here...");
                    }
                }
            }

            private function attrInsp_deleteFeatureHandler(event:AttributeInspectorEvent):void
            {
                myMap.infoWindow.hide();

                const deletes:Array = [ event.feature ];
                event.featureLayer.applyEdits(null, null, deletes, false,
                                              new AsyncResponder(featureLayer_editsCompleteHandler, featureLayer_faultHandler));
            }

            private function attrInsp_updateFeatureHandler(event:AttributeInspectorEvent):void
            {
                const attributes:Object = {};
                const objectIdField:String = event.featureLayer.layerDetails.objectIdField;
                attributes[objectIdField] = event.feature.attributes[objectIdField];
                attributes[event.field.name] = event.newValue;

                // change the attributes on client right away, the attribute inspector does not do that automatically
                event.feature.attributes[event.field.name] = event.newValue;

                const feature:Graphic = new Graphic(null, null, attributes);
                const updates:Array = [ feature ];
                event.featureLayer.applyEdits(null, updates, null, false,
                                              new AsyncResponder(featureLayer_editsCompleteHandler, featureLayer_faultHandler,
                                                                 { feature: event.feature, field: event.field, oldValue: event.oldValue }));
            }

            private function featureLayer_editsCompleteHandler(featureEditResults:FeatureEditResults, token:Object = null):void
            {
                var doRefresh:Boolean = false;
                for each (var deleteResult:FeatureEditResult in featureEditResults.deleteResults)
                {
                    if (deleteResult.success === false)
                    {
                        Alert.show("Could not delete feature");
                    }
                    else
                    {
                        status.text = "Feature deleted.";
                        doRefresh = true;
                    }
                }

                for each (var updateResult:FeatureEditResult in featureEditResults.updateResults)
                {
                    const feature:Graphic = token.feature;
                    if (updateResult.success === false)
                    {
                        Alert.show("Could not update feature, Restoring old value", "Error");

                        const field:Field = token.field;
                        feature.attributes[field.name] = token.oldValue;
                        if (attrInsp.activeFeature === feature)
                        {
                            attrInsp.refreshActiveFeature();
                        }
                    }
                    else
                    {
                        status.text = "Feature attribute updated.";
                        doRefresh = true;

                        //refresh the feature to see the changes client side
                        feature.refresh();
                    }
                }

                if (doRefresh)
                {
                    opsLayer.refresh();
                }
            }

            private function featureLayer_faultHandler(fault:Fault, token:Object = null):void
            {
                Alert.show(fault.faultString, "Fault");
            }

            protected function getFeatureCount(value:Array):int
            {
                return value.length;
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:Query id="queryMapClick"/>
    </fx:Declarations>

    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

    <s:Label fontSize="13"
             fontWeight="bold"
             paddingLeft="5"
             paddingTop="5"
             text="Click on any field to see, and modify, its attributes."/>
    <esri:Map id="myMap"
              load="attrInsp.featureLayers = [myFeatureLayer]"
              mapClick="map_mapClickHandler(event)">
        <esri:extent>
            <esri:WebMercatorExtent minlon="-97.53" minlat="37.43" maxlon="-97.26" maxlat="37.64"/>
        </esri:extent>
        <esri:ArcGISTiledMapServiceLayer url="http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"/>
        <esri:ArcGISDynamicMapServiceLayer id="opsLayer" url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Petroleum/KSFields/MapServer"/>
        <esri:FeatureLayer id="myFeatureLayer"
                           mode="selection"
                           outFields="[activeprod, field_name, polydate, status, prod_oil]"
                           selectionComplete="myFeatureLayer_selectionCompleteHandler(event)"
                           url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Petroleum/KSFields/FeatureServer/0"/>
        <esri:infoWindowContent>
            <s:BorderContainer backgroundColor="0xFFFFFF">
                <esri:AttributeInspector id="attrInsp"
                                         deleteFeature="attrInsp_deleteFeatureHandler(event)"
                                         updateFeature="attrInsp_updateFeatureHandler(event)">

                    <esri:FieldInspector featureLayer="{myFeatureLayer}"
                                         fieldName="activeprod"
                                         label="ACTIVE_PRODUCTION"/>

                    <esri:FieldInspector featureLayer="{myFeatureLayer}"
                                         fieldName="field_name"
                                         label="FIELDNAME"/>

                    <esri:FieldInspector featureLayer="{myFeatureLayer}"
                                         fieldName="prod_oil"
                                         label="PRODUCTION_OIL">
                        <esri:editor>
                            <fx:Component>
                                <esri:ButtonBarField>
                                    <esri:dataProvider>
                                        <s:ArrayCollection>
                                            <fx:Object label="Yes" value="Yes"/>
                                            <fx:Object label="No" value="No"/>
                                        </s:ArrayCollection>
                                    </esri:dataProvider>
                                </esri:ButtonBarField>
                            </fx:Component>
                        </esri:editor>
                    </esri:FieldInspector>
                </esri:AttributeInspector>
            </s:BorderContainer>
        </esri:infoWindowContent>
    </esri:Map>
    <s:HGroup width="100%" horizontalCenter="0">
        <s:Label text="The feature layer has {getFeatureCount(myFeatureLayer.selectedFeatures)} selected feature."/>
    </s:HGroup>
    <s:HGroup width="100%" horizontalCenter="0">
        <s:Label id="status"/>
    </s:HGroup>
</s:Application>
