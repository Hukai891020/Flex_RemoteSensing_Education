<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:esri="http://www.esri.com/2008/ags"
               xmlns:s="library://ns.adobe.com/flex/spark"
               pageTitle="Template Picker Testing FeatureService Layer">

    <!--
    This sample also uses the following files:
    com/esri/ags/samples/skins/MyTemplatePickerSkin.mxml
    com/esri/ags/samples/skins/MyTemplatePickerListItemRenderer.mxml
    -->

    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.events.DrawEvent;
            import com.esri.ags.events.LayerEvent;
            import com.esri.ags.events.TemplatePickerEvent;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.layers.supportClasses.FeatureLayerDetails;
            import com.esri.ags.layers.supportClasses.FeatureTemplate;
            import com.esri.ags.samples.skins.MyTemplatePickerSkin;
            import com.esri.ags.skins.TemplatePickerSkin;
            import com.esri.ags.symbols.FillSymbol;
            import com.esri.ags.symbols.LineSymbol;
            import com.esri.ags.symbols.MarkerSymbol;
            import com.esri.ags.utils.WebMercatorUtil;

            import mx.controls.Alert;
            import mx.rpc.events.FaultEvent;

            import spark.events.IndexChangeEvent;

            protected function myFeatureLayer_loadHandler(event:LayerEvent):void
            {
                // templatepicker expects layerDetails to be available (i.e. layer loaded)
                myTemplatePicker.featureLayers = [ myFeatureLayer ];
            }

            protected function myTemplatePicker_selectedTemplateChangeHandler(event:TemplatePickerEvent):void
            {
                if (event.selectedTemplate)
                {
                    switch (event.selectedTemplate.featureLayer.layerDetails.geometryType)
                    {
                        case Geometry.MAPPOINT:
                        {
                            if (event.selectedTemplate.featureLayer.renderer != null)
                            {
                                drawTool.markerSymbol = event.selectedTemplate.featureLayer.renderer.getSymbol(event.selectedTemplate.featureTemplate.prototype);
                            }
                            else if (event.selectedTemplate.featureLayer.symbol)
                            {
                                drawTool.markerSymbol = event.selectedTemplate.featureLayer.symbol;
                            }

                            drawTool.activate(DrawTool.MAPPOINT);
                            break;
                        }
                        case Geometry.POLYLINE:
                        {
                            if (event.selectedTemplate.featureLayer.renderer != null)
                            {
                                drawTool.lineSymbol = event.selectedTemplate.featureLayer.renderer.getSymbol(event.selectedTemplate.featureTemplate.prototype);
                            }
                            else if (event.selectedTemplate.featureLayer.symbol)
                            {
                                drawTool.lineSymbol = event.selectedTemplate.featureLayer.symbol;
                            }

                            // use the drawingTool information that comes with Template
                            if (event.selectedTemplate.featureTemplate.drawingTool)
                            {
                                switch (event.selectedTemplate.featureTemplate.drawingTool)
                                {
                                    case FeatureTemplate.TOOL_LINE:
                                    {
                                        drawTool.activate(DrawTool.POLYLINE);
                                        break;
                                    }
                                    case FeatureTemplate.TOOL_FREEHAND:
                                    {
                                        drawTool.activate(DrawTool.FREEHAND_POLYLINE);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                drawTool.activate(DrawTool.POLYLINE);
                            }
                            break;
                        }
                        case Geometry.POLYGON:
                        {
                            if (event.selectedTemplate.featureLayer.renderer != null)
                            {
                                drawTool.fillSymbol = event.selectedTemplate.featureLayer.renderer.getSymbol(event.selectedTemplate.featureTemplate.prototype);
                            }
                            else if (event.selectedTemplate.featureLayer.symbol)
                            {
                                drawTool.fillSymbol = event.selectedTemplate.featureLayer.symbol;
                            }

                            // use the drawingTool information that comes with Template
                            if (event.selectedTemplate.featureTemplate.drawingTool)
                            {
                                switch (event.selectedTemplate.featureTemplate.drawingTool)
                                {
                                    case FeatureTemplate.TOOL_FREEHAND:
                                    {
                                        drawTool.activate(DrawTool.FREEHAND_POLYGON);
                                        break;
                                    }
                                    case FeatureTemplate.TOOL_POLYGON:
                                    {
                                        drawTool.activate(DrawTool.POLYGON);
                                        break;
                                    }
                                    case FeatureTemplate.TOOL_RECTANGLE:
                                    {
                                        drawTool.activate(DrawTool.EXTENT);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                drawTool.activate(DrawTool.POLYGON);
                            }
                            break;
                        }
                    }

                }
                else // user de-selected the template
                {
                    drawTool.deactivate();
                }
            }

            protected function draw_drawEndHandler(event:DrawEvent):void
            {
                // add features to the respective feature layers

                //need this to preserve the template symbol, otherwise the line below adds the feature with the default symbol
                //myTemplatePicker.selectedTemplate.featureLayer.applyEdits([event.graphic], null, null);
                if (myTemplatePicker.selectedTemplate.featureTemplate)
                {
                    var newAtttrs:* = myTemplatePicker.selectedTemplate.featureTemplate.prototype.attributes;
                    var newGraphic:Graphic = new Graphic(event.graphic.geometry, null, newAtttrs);
                    myTemplatePicker.selectedTemplate.featureLayer.applyEdits([ newGraphic ], null, null);
                }
                else
                {
                    myTemplatePicker.selectedTemplate.featureLayer.applyEdits([ event.graphic ], null, null);
                }
            }

            protected function changeFeatureLayer():void
            {
                myFeatureLayer.url = fURL.text;
            }

            protected function zoom_clickHandler(event:MouseEvent):void
            {
                // depending on featurelayer wkid, projection might be needed
                if (myMap.spatialReference == myFeatureLayer.layerDetails.spatialReference)
                {
                    myMap.extent = myFeatureLayer.layerDetails.extent;
                }
                else if ( // close enough
                    (myMap.spatialReference.wkid == 3857 || myMap.spatialReference.wkid == 102100)
                    &&
                    (myFeatureLayer.layerDetails.spatialReference.wkid == 3857 || myFeatureLayer.layerDetails.spatialReference.wkid == 102100))
                {
                    myMap.extent = myFeatureLayer.layerDetails.extent;
                }
                else if (myFeatureLayer.layerDetails.spatialReference.wkid == 4326
                    && myMap.spatialReference.wkid == 102100)
                {
                    myMap.extent = WebMercatorUtil.geographicToWebMercator(myFeatureLayer.layerDetails.extent) as Extent;
                }
                else // should use GeometryService to do this job
                {
                    Alert.show("Sorry, I'm too lazy to convert the FeatureLayer extent to the map extent, simply zoom on your own",
                               myFeatureLayer.layerDetails.spatialReference + " vs " + myMap.spatialReference);
                }
            }

            protected function myFeatureLayer_faultHandler(event:FaultEvent):void
            {
                Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "FeatureLayer Fault " + event.fault.faultCode);
            }

            protected function myFeatureLayer_loadErrorHandler(event:LayerEvent):void
            {
                Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "FeatureLayer Load Error " + event.fault.faultCode);
            }

            protected function tbb_changeHandler(event:IndexChangeEvent):void
            {
                myTemplatePicker.clearSelection();
                switch (tbb.selectedItem)
                {
                    case "No Label":
                    {
                        myTemplatePicker.setStyle("skinClass", MyTemplatePickerSkin);
                        break;
                    }
                    default:
                    {
                        myTemplatePicker.setStyle("skinClass", TemplatePickerSkin);
                        break;
                    }
                }
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:DrawTool id="drawTool"
                       drawEnd="draw_drawEndHandler(event)"
                       map="{myMap}"/>
    </fx:Declarations>

    <s:BorderContainer width="100%" height="40"
                       backgroundColor="0xDDDDFF"
                       borderAlpha="0">
        <s:layout>
            <s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
        </s:layout>
        <s:Label paddingLeft="8" text="Layer in a FeatureService:"/>
        <s:TextInput id="fURL"
                     width="100%"
                     enter="changeFeatureLayer()"
                     text="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/HomelandSecurity/operations/FeatureServer/0"/>
        <s:Button click="changeFeatureLayer()" label="Load"/>
    </s:BorderContainer>

    <mx:HDividedBox width="100%" height="100%"
                    paddingLeft="5">
        <s:VGroup width="20%" height="100%">
            <s:BorderContainer width="100%" height="100%">
                <s:borderStroke>
                    <s:SolidColorStroke weight="5"/>
                </s:borderStroke>
                <s:layout>
                    <s:VerticalLayout horizontalAlign="center"/>
                </s:layout>
                <esri:TemplatePicker id="myTemplatePicker"
                                     width="100%" height="90%"
                                     selectedTemplateChange="myTemplatePicker_selectedTemplateChangeHandler(event)"/>
                <s:ButtonBar id="tbb"
                             change="tbb_changeHandler(event)"
                             creationComplete="tbb.selectedIndex = 0">
                    <s:ArrayList>
                        <fx:String>Default</fx:String>
                        <fx:String>No Label</fx:String>
                    </s:ArrayList>
                </s:ButtonBar>
            </s:BorderContainer>
            <s:Button click="zoom_clickHandler(event)" label="Zoom to layer"/>
        </s:VGroup>
        <esri:Map id="myMap"
                  width="80%" height="100%">
            <esri:ArcGISTiledMapServiceLayer url="http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"/>
            <esri:FeatureLayer id="myFeatureLayer"
                               fault="myFeatureLayer_faultHandler(event)"
                               load="myFeatureLayer_loadHandler(event)"
                               loadError="myFeatureLayer_loadErrorHandler(event)"
                               mode="onDemand"
                               url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/HomelandSecurity/operations/FeatureServer/0"/>
        </esri:Map>
    </mx:HDividedBox>
</s:Application>
