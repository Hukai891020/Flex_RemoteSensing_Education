<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2008-2012 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// License.txt and/or use_restrictions.txt.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:esri="http://www.esri.com/2008/ags"
               pageTitle="Using a custom FieldInspector">
    <!--
    This sample illustrates the programming patterns to create your own custom FieldInspector renderer

    This sample also uses the following file:
    com/esri/ags/samples/components/MyCalendarRenderer.as
    -->

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.SpatialReference;
            import com.esri.ags.events.AttributeInspectorEvent;
            import com.esri.ags.events.FeatureLayerEvent;
            import com.esri.ags.events.MapMouseEvent;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.layers.supportClasses.FeatureEditResult;
            import com.esri.ags.layers.supportClasses.FeatureEditResults;
            import com.esri.ags.layers.supportClasses.Field;
            import com.esri.ags.utils.WebMercatorUtil;

            import mx.controls.Alert;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;
            import mx.rpc.events.FaultEvent;

            private function map_mapClickHandler(event:MapMouseEvent):void
            {
                // We create a bounding box around where the user click to intersect the feature's point.
                const point:Point = map.toScreen(map.toMapFromStage(event.stageX, event.stageY));
                var topLeft:MapPoint = map.toMap(new Point(point.x - 10, point.y + 10));
                var bottomRight:MapPoint = map.toMap(new Point(point.x + 10, point.y - 10));
                const spatialReference:SpatialReference = map.spatialReference;
                var selectionExtent:Extent = WebMercatorUtil.webMercatorToGeographic(new Extent(topLeft.x, topLeft.y, bottomRight.x, bottomRight.y, spatialReference)) as Extent; // create an extent of the clicked point

                queryMapClick.geometry = selectionExtent;
                myFeatureLayer.selectFeatures(queryMapClick);
                map.infoWindow.hide();
            }

            private function myFeatureLayer_selectionCompleteHandler(event:FeatureLayerEvent):void
            {
                // only show infoWindow if a feature was found
                if (event.featureLayer.numGraphics > 0)
                {
                    map.infoWindow.show(WebMercatorUtil.geographicToWebMercator((queryMapClick.geometry as Extent).center) as MapPoint);
                }
            }

            private function attrInsp_deleteFeatureHandler(event:AttributeInspectorEvent):void
            {
                map.infoWindow.hide();

                const deletes:Array = [ event.feature ];
                event.featureLayer.applyEdits(null, null, deletes, false,
                                              new AsyncResponder(featureLayer_editsCompleteHandler, featureLayer_faultHandler));
            }

            private function attrInsp_updateFeatureHandler(event:AttributeInspectorEvent):void
            {
                const attributes:Object = {};
                const objectIdField:String = event.featureLayer.layerDetails.objectIdField;
                attributes[objectIdField] = event.feature.attributes[objectIdField];
                attributes[event.field.name] = event.newValue;

                // change the attributes on client right away, the attribute inspector does not do that automatically
                event.feature.attributes[event.field.name] = event.newValue;

                const feature:Graphic = new Graphic(null, null, attributes);
                const updates:Array = [ feature ];
                event.featureLayer.applyEdits(null, updates, null, false,
                                              new AsyncResponder(featureLayer_editsCompleteHandler, featureLayer_faultHandler,
                                                                 { feature: event.feature, field: event.field, oldValue: event.oldValue }));
            }

            private function featureLayer_editsCompleteHandler(featureEditResults:FeatureEditResults, token:Object = null):void
            {
                var doRefresh:Boolean = false;
                for each (var deleteResult:FeatureEditResult in featureEditResults.deleteResults)
                {
                    if (deleteResult.success === true)
                    {
                        doRefresh = true;
                    }
                }

                for each (var updateResult:FeatureEditResult in featureEditResults.updateResults)
                {
                    const feature:Graphic = token.feature;
                    if (updateResult.success === false)
                    {
                        const field:Field = token.field;
                        feature.attributes[field.name] = token.oldValue;
                        if (attrInsp.activeFeature === feature)
                        {
                            attrInsp.refreshActiveFeature();
                        }
                    }
                    else
                    {
                        doRefresh = true;

                        //refresh the feature to see the changes client side
                        feature.refresh();
                    }
                }

                if (doRefresh)
                {
                    opsLayer.refresh();
                }
            }

            private function featureLayer_faultHandler(fault:Fault, token:Object = null):void
            {
                Alert.show(fault.faultString, "Fault");
            }

            private function attrInsp_faultHandler(event:FaultEvent):void
            {
                Alert.show(event.fault.message, "Fault");
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:Query id="queryMapClick"/>
    </fx:Declarations>

    <esri:Map id="map"
              load="attrInsp.featureLayers = [myFeatureLayer]"
              mapClick="map_mapClickHandler(event)">
        <esri:extent>
            <esri:WebMercatorExtent minlon="-122.51849427078236" minlat="37.770022236871846" maxlon="-122.49102845046914" maxlat="37.78533712512785"/>
        </esri:extent>
        <esri:ArcGISTiledMapServiceLayer alpha="0.5" url="http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer"/>
        <esri:ArcGISDynamicMapServiceLayer id="opsLayer" url="http://servicesbeta2.esri.com/arcgis/rest/services/SF311/MapServer"/>
        <esri:FeatureLayer id="myFeatureLayer"
                           mode="selection"
                           outFields="[REQ_TYPE, REQ_DATE, ADDRESS, STATUS]"
                           selectionComplete="myFeatureLayer_selectionCompleteHandler(event)"
                           url="http://servicesbeta2.esri.com/arcgis/rest/services/SF311/FeatureServer/0"
                           useAMF="false"/>
        <esri:infoWindowContent>
            <s:BorderContainer backgroundColor="0xFFFFFF">
                <esri:AttributeInspector id="attrInsp"
                                         deleteFeature="attrInsp_deleteFeatureHandler(event)"
                                         updateFeature="attrInsp_updateFeatureHandler(event)">
                    <esri:FieldInspector editor="com.esri.ags.samples.components.MyCalendarEditor"
                                         featureLayer="{myFeatureLayer}"
                                         fieldName="REQ_DATE"/>
                </esri:AttributeInspector>
            </s:BorderContainer>
        </esri:infoWindowContent>
    </esri:Map>

</s:Application>
